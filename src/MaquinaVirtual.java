
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;


/*
 * MaquinaVirtual.java
 */
/**
 * Trabalho de Compiladores
 *
 * @author Daniel Franco 07295314
 */
public class MaquinaVirtual extends javax.swing.JFrame {
    
    public DefaultTableModel modelPrincipal = new DefaultTableModel();
    public DefaultTableModel modelInput = new DefaultTableModel();
    public DefaultTableModel modelOutput = new DefaultTableModel();
    public DefaultTableModel modelStack = new DefaultTableModel();
    public  int linha = 0;
    public int s = 0;
    public int [] M = new int[20000];
    
    

    /** Creates new form MaquinaVirtual */
    public MaquinaVirtual() {
        initComponents();
        this.setLocationRelativeTo(null);
        ButtonGroup bgroup = new ButtonGroup();
        bgroup.add(JRadioButtonNormal);
        bgroup.add(JRadioButtonStepbystep);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        principal = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        stack = new javax.swing.JTable();
        jLabelInput = new javax.swing.JLabel();
        stop = new javax.swing.JButton();
        run = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelOutput = new javax.swing.JLabel();
        JRadioButtonNormal = new javax.swing.JRadioButton();
        JRadioButtonStepbystep = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        input = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        output = new javax.swing.JTable();
        jButtonClean = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        open = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Máquina Virtual");

        principal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linha", "Instrução", "Atributo 1", "Atributo 2", ""
            }
        ));
        jScrollPane1.setViewportView(principal);
        principal.getColumnModel().getColumn(0).setPreferredWidth(50);
        principal.getColumnModel().getColumn(1).setPreferredWidth(100);
        principal.getColumnModel().getColumn(2).setPreferredWidth(80);
        principal.getColumnModel().getColumn(3).setPreferredWidth(80);
        principal.getColumnModel().getColumn(4).setPreferredWidth(30);

        stack.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Endereço", "Valor", ""
            }
        ));
        jScrollPane2.setViewportView(stack);
        stack.getColumnModel().getColumn(0).setPreferredWidth(80);
        stack.getColumnModel().getColumn(1).setPreferredWidth(80);
        stack.getColumnModel().getColumn(2).setPreferredWidth(20);

        jLabelInput.setText("Input");

        stop.setText("Stop");

        run.setText("Run");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        jLabel2.setText("Code");

        jLabel3.setText("Stack");

        jLabelOutput.setText("Output");

        JRadioButtonNormal.setText("Normal");

        JRadioButtonStepbystep.setText("Debug Mode");
        JRadioButtonStepbystep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRadioButtonStepbystepActionPerformed(evt);
            }
        });

        jLabel5.setText("Modo de Execução");

        input.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ));
        jScrollPane3.setViewportView(input);

        output.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ));
        jScrollPane4.setViewportView(output);

        jButtonClean.setText("Clean");
        jButtonClean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCleanMouseClicked(evt);
            }
        });

        open.setText("File");
        open.setToolTipText("Open obj files");

        abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        abrir.setText("Open");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        open.add(abrir);

        jMenuBar1.add(open);

        jMenu1.setText("Help");

        jMenu2.setText("About");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                        .addGap(777, 777, 777))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelInput, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                        .addGap(842, 842, 842))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelOutput)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                                .addGap(27, 27, 27))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(JRadioButtonNormal, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                                .addGap(64, 64, 64))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(JRadioButtonStepbystep, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                                .addGap(24, 24, 24)))
                                        .addGap(123, 123, 123))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(stop, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(run, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonClean)
                                        .addContainerGap())))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelInput)
                            .addComponent(jLabelOutput)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addGap(23, 23, 23)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14)
                        .addComponent(JRadioButtonNormal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)
                        .addComponent(JRadioButtonStepbystep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(run, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonClean))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1)))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
     
    /* Variaveis */
    int linha = 0;
    BufferedReader in = null;
    String str = null;
    HashMap rotulos = new HashMap();
    
    //Models
    modelPrincipal = (DefaultTableModel) principal.getModel();
    modelInput = (DefaultTableModel) input.getModel();  
    modelOutput = (DefaultTableModel) output.getModel();
    modelStack = (DefaultTableModel) stack.getModel();
    
    /* String de expreção regular */
    String regex = "[ ]*([a-zA-Z0-9]*)[ ]*([a-zA-Z0-9]*)[ ]*([a-zA-Z0-9]*)[ ]*([a-zA-Z0-9]*).*";
    Pattern pattern = Pattern.compile(regex);
    Matcher matcher;
        
    
    String path = null;
    JFileChooser arquivo = new JFileChooser(); //abrir Arquivo
    arquivo.setFileFilter(new FileNameExtensionFilter("*.obj","obj")); // filtro para o tipo de arquivo
    //arquivo.setAcceptAllFileFilterUsed(false); //tirar todas  as extensoes 
    arquivo.setFileSelectionMode(JFileChooser.FILES_ONLY);  //somente files sao abertos 
    int op = arquivo.showOpenDialog(this);
    if (op == JFileChooser.APPROVE_OPTION) {
                
        this.linha = 0;
        s = 0; //stacker point
        M = new int[20000];
        
        JRadioButtonStepbystep.setSelected(false);
        JRadioButtonNormal.setSelected(false);
     
        File arq = arquivo.getSelectedFile();
        path = arq.toString();
    }
    else
        return;
        
    
    try {
        in = new BufferedReader(new FileReader(path));// Leitura do arquivo para mapear os rotulos em linhas
        this.setTitle("Máquina Virtual - "+path);
        linha = 0;
        while (in.ready()) {
            str = in.readLine();    // Leitura de uma linha de cada vez
            matcher = pattern.matcher(str);
            if (matcher.find()) {   
                /* Percorre os casamentos para achar o indice do comando */
                for (int indice = 1; indice < matcher.groupCount(); indice++) {
                    /* Verifica se o valor é um comando */
                    if (isCommand(matcher.group(indice))) {
                        /* Caso em que o commando é o segundo valor casado, consequentemente o primeiro valor é o rotulo */
                        if(indice == 2){
                            /* Insere chave = rotulo e valor = linha */
                            rotulos.put(matcher.group(1), linha);
                        }
                        break;
                    }
                }
            }
            linha++;
        }
        in.close();
    } catch (IOException e) {
        System.out.println("Erro ao ler o arquivo...");
    }

    /* Leitura do arquivo selecionado para carregar codigo*/
    try {
        in = new BufferedReader(new FileReader(path));
        linha = 0;
        while (in.ready()) {
            str = in.readLine();    // Leitura de uma linha de cada vez
            matcher = pattern.matcher(str);
            if (matcher.find()) {   
                /* Percorre os casamentos para achar o indice do comando */
                for (int indice = 1; indice < matcher.groupCount(); indice++) {
                    /* Verifica se o valor é um comando */
                    if (isCommand(matcher.group(indice))) {
                        switch (indice) {
                            case 1: /* Caso em que o comando é o primero valor*/
                                if(isCommandLabel(matcher.group(1)) && rotulos.containsKey(matcher.group(2))){
                                    /* Adiciona na tabela a linha e seus respectivos valores */
                                    modelPrincipal.addRow(new Object[]{linha++, matcher.group(1), rotulos.get(matcher.group(2)), matcher.group(3)});
                                
                                }
                                else{
                                    /* Adiciona na tabela a linha e seus respectivos valores */
                                    modelPrincipal.addRow(new Object[]{linha++, matcher.group(1), matcher.group(2), matcher.group(3)});
                                }
                                break;
                            case 2: /* Caso em que o commando é o segundo valor casado, consequentemente o primeiro valor é o rotulo */
                                if(isCommandLabel(matcher.group(1)) && rotulos.containsKey(matcher.group(3))){
                                    /* Adiciona na tabela a linha e seus respectivos valores */
                                    modelPrincipal.addRow(new Object[]{linha++, matcher.group(2), rotulos.get(matcher.group(3)), matcher.group(4)});
                                
                                }
                                else{
                                    /* Adiciona na tabela a linha e seus respectivos valores */
                                    modelPrincipal.addRow(new Object[]{linha++, matcher.group(2), matcher.group(3), matcher.group(4)});
                                }
                                break;
                                
                        }
                        break;
                    }
                }
            }
        }
        in.close();
    } catch (IOException e) {
        System.out.println("Erro ao ler o arquivo...");
    }
    
    principal.setRowSelectionInterval(0, 0);

 
}//GEN-LAST:event_abrirActionPerformed

private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
try{
    if(!(JRadioButtonNormal.isSelected() || JRadioButtonStepbystep.isSelected())){
        JOptionPane.showMessageDialog(null, "Escolha um Modo de Execução", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    while (linha < principal.getRowCount())
    {
        String instrucao = (String) modelPrincipal.getValueAt(linha, 1);
        
        if(instrucao.equals("START"))
        {
            s = -1;
            linha++;
        }
        
        else if(instrucao.equals("ALLOC"))/*Alocar memoria*/
        {
            int m = Integer.parseInt(modelPrincipal.getValueAt(linha, 2).toString());
            int n = Integer.parseInt(modelPrincipal.getValueAt(linha, 3).toString());

            for(int k=0; k <= (n-1); k++)
            {
                s=s+1;
                M[s]=M[m+k];
            }
            
            linha++;           
        }
        
     
        else if(instrucao.equals("DALLOC"))
        {
            int m = Integer.parseInt(modelPrincipal.getValueAt(linha, 2).toString());
            int n = 0;
            if(!modelPrincipal.getValueAt(linha, 3).toString().equals(""))
                n = Integer.parseInt(modelPrincipal.getValueAt(linha, 3).toString());
            
            for(int k = (n-1); k >= 0 ; k--)
            {   
                M[m+k]=M[s];
                s=s-1;
            }
            
            linha++;
        }
                  
        /*Carregar constante*/
        else if(instrucao.equals("LDC"))
        {
            int k = Integer.parseInt(modelPrincipal.getValueAt(linha, 2).toString());
            s=s+1;
            M[s]= k;
            linha++;
        }
        
        /*Carregar valor*/
        else if(instrucao.equals("LDV"))
        {
            int n = Integer.parseInt(modelPrincipal.getValueAt(linha, 2).toString());
            s=s+1;
            M[s] = M [n];
            linha++;
        }
        
        
        else if(instrucao.equals("ADD"))
        {
            M[s-1]= M[s-1] + M[s];
            s=s-1;
            linha++;
        }
        
        
        else if(instrucao.equals("SUB"))
        {
            M[s-1]= M[s-1] - M[s];
            s=s-1;
            linha++;
        }
        
       
        else if(instrucao.equals("MULT"))
        {
            M[s-1]= M[s-1] * M[s];
            s=s-1;
            linha++;
        }
        
        
        else if(instrucao.equals("DIVI"))
        {
            M[s-1]= M[s-1] / M[s];
            s=s-1;
            linha++;
        }
        
        /*inverter sinal*/
        else if(instrucao.equals("INV"))
        {
            M[s]=-M[s];
            linha++;
        }
        
        /*Conjuncao*/
        else if(instrucao.equals("AND"))
        {
            if (M[s-1]==1 && M[s]==1)
                M[s-1]=1;
            else
                M[s-1]=0;

            s=s-1;
            linha++;
        }
        
        /*Disjuncao*/
        else if(instrucao.equals("OR"))
        {
            if (M[s-1]==1 || M[s]==1)
                M[s-1]=1;
            else
                M[s-1]=0;

            s=s-1;
            linha++;
        }
        
      
        else if(instrucao.equals("NEG"))
        {
            M[s]= 1-M[s];
            linha++;
        }
        
        /*Comparar menor*/
        else if(instrucao.equals("CME"))
        {
            if(M[s-1] < M[s])
                M[s-1]=1;
            else
                M[s-1]=0;

            s=s-1;
            linha++;
        }
        
        /*Comparar maior*/
        else if(instrucao.equals("CMA"))
        {
            if(M[s-1] > M[s])
                M[s-1]=1;
            else
                M[s-1]=0;

            s=s-1;
            linha++;
        }
        
        /*Comparar igual*/
        else if(instrucao.equals("CEQ"))
        {
            if(M[s-1] == M[s])
                M[s-1]=1;
            else
                M[s-1]=0;

            s=s-1;
            linha++;
        }
        
        /*Comparar desigual*/
        else if(instrucao.equals("CDIF"))
        {
            if(M[s-1] != M[s])
                M[s-1]=1;
            else
                M[s-1]=0;

            s=s-1;
            linha++;
        }
        
        /*Comparar menor ou igual*/
        else if(instrucao.equals("CMEQ"))
        {
            if(M[s-1] <= M[s])
                M[s-1]=1;
            else
                M[s-1]=0;

            s=s-1;
            linha++;
        }
        
        /*Comparar maior ou igual*/
        else if(instrucao.equals("CMAQ"))
        {
            if(M[s-1] >= M[s])
                M[s-1]=1;
            else
                M[s-1]=0;

            s=s-1;
            linha++;
        } 
        
        /*Parar a execucao da MVD*/
        else if(instrucao.equals("HLT"))
        {
                System.out.println("acabou");
                break;
        } 
        
        /*Armazenar valor*/
        else if(instrucao.equals("STR"))
        {
            M[Integer.parseInt(modelPrincipal.getValueAt(linha, 2).toString())]=M[s];
            s=s-1;
            linha++;
        } 
        
        /*Desviar sempre*/
        else if(instrucao.equals("JMP"))
        {
            linha = Integer.parseInt(modelPrincipal.getValueAt(linha, 2).toString());
        }
        
        /*Desviar se falso*/
        else if(instrucao.equals("JMPF"))
        {
            if(M[s]==0)
                linha=Integer.parseInt(modelPrincipal.getValueAt(linha, 2).toString());
            else 
                linha=linha+1;

            s=s-1;
        } 
        
        /*Nada*/
        else if(instrucao.equals("NULL"))
        {
            linha++;
        } 
        
        /*Leitura*/
        else if(instrucao.equals("RD"))
        {
            s=s+1;
                // pede para o usuário inserir seu nome
      String name =JOptionPane.showInputDialog( "Entrada de Dados" );
            modelInput.addRow(new Object[]{name});
            M[s]= Integer.parseInt(name);//Recebe a input
            linha++;
        }
        
        /*Impressao*/
        else if(instrucao.equals("PRN"))
        {
            System.out.println(M[s]);
            modelOutput.addRow(new Object[]{M[s]});
            s=s-1;
            linha++;
        }
        
        /*Chamar procedimento ou funcao*/
        else if(instrucao.equals("CALL"))
        {
            int t = Integer.parseInt(modelPrincipal.getValueAt(linha, 2).toString());
            s=s+1;
            M[s]=linha+1;
            linha=t;
        }
        
        /*Retornar de procedimento*/
        else if(instrucao.equals("RETURN"))
        {
            linha=M[s];
            s=s-1;
        }
        
        while(modelStack.getRowCount()!=0){
            modelStack.removeRow(0);
        }
        
        for(int i=0;i<=s;i++)
        modelStack.addRow(new Object[]{i,M[i]});
        
        if(linha<principal.getRowCount())
            principal.setRowSelectionInterval(linha, linha);
        
        if(JRadioButtonStepbystep.isSelected())
            break;
    }
       }catch(Exception e){
        JOptionPane.showMessageDialog(null, "Dado inválido na pilha!");
    }
}//GEN-LAST:event_runActionPerformed

    private void jButtonCleanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCleanMouseClicked
              while(modelPrincipal.getRowCount()!=0){
            modelPrincipal.removeRow(0);
        }
        
        while(modelInput.getRowCount()!=0){
            modelInput.removeRow(0);
        }
                
        while(modelOutput.getRowCount()!=0){
            modelOutput.removeRow(0);
        }
        
        while(modelStack.getRowCount()!=0){
            modelStack.removeRow(0);
        }
    }//GEN-LAST:event_jButtonCleanMouseClicked

    private void JRadioButtonStepbystepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRadioButtonStepbystepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JRadioButtonStepbystepActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        AboutAuthors about = new AboutAuthors();
        about.setVisible(true);
        about.open();
    }//GEN-LAST:event_jMenu2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaquinaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaquinaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaquinaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaquinaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MaquinaVirtual().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton JRadioButtonNormal;
    private javax.swing.JRadioButton JRadioButtonStepbystep;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JTable input;
    private javax.swing.JButton jButtonClean;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelInput;
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenu open;
    private javax.swing.JTable output;
    private javax.swing.JTable principal;
    private javax.swing.JButton run;
    private javax.swing.JTable stack;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables

    private boolean isCommand(String group) {
        String commands[] = {"LDC", "LDV", "ADD", "SUB", "MULT", "DIVI",
        "INV", "AND", "OR", "NEG", "CME", "CMA", "CEQ", "CDIF", "CMEQ", "CMAQ",
        "START", "HLT", "STR", "JMP", "JMPF", "NULL", "RD", "PRN", "ALLOC", "DALLOC",
        "CALL", "RETURN"};
        boolean flag = false;

        for (int i = 0; i < commands.length; i++) {
            if (commands[i].equals(group)) {
                flag = true;
            }
        }

        if (flag) {
            return true;
        } else {
            return false;
        }

    }

    private boolean isCommandLabel(String group) {
        String commands[] = {"JMP", "JMPF", "CALL", "RETURN"};
        boolean flag = false;

        for (int i = 0; i < commands.length; i++) {
            if (commands[i].equals(group)) {
                flag = true;
            }
        }

        if (flag) {
            return true;
        } else {
            return false;
        }
    }
}
